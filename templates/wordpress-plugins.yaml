apiVersion: template.openshift.io/v1
kind: Template
metadata:
  annotations:
    description: Creates a WordPress installation with separate MySQL database instance.
      Requires that two persistent volumes be available. If a ReadWriteMany persistent
      volume type is available and used, WordPress can be scaled to multiple replicas
      and the deployment strategy switched to Rolling to permit rolling deployments
      on restarts
    iconClass: icon-php
    openshift.io/display-name: WordPress (with default plugins)
    tags: quickstart,php,wordpress
  name: wordpress-plugins
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-img
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    output:
      imageLabels:
      - name: io.k8s.display-name
        value: WordPress
      - name: io.k8s.description
        value: WordPress application and S2I builder.
      - name: io.openshift.s2i.scripts-url
        value: image:///opt/app-root/s2i
      - name: io.s2i.scripts-url
        value: image:///opt/app-root/s2i
      - name: io.openshift.tags
        value: builder,php,wordpress
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}-img:latest
    source:
      git:
        uri: https://github.com/rtweed/wp.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: php:${PHP_VERSION}
          namespace: openshift
      type: Source
    triggers:
    - type: ConfigChange
    - type: ImageChange
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
    annotations:
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"${APPLICATION_NAME}-img:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"wordpress\")].image","pause":"false"}]'
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}
    strategy:
      type: ${WORDPRESS_DEPLOYMENT_STRATEGY}
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: SUFFIX
            value: apps.math.cnrs.fr
          - name: APPLICATION_NAME
            value: ${APPLICATION_NAME}
          - name: PUBLIC_URL
            value: ${PUBLIC_URL}
          - name: WP_ADMIN
            value: ${WP_ADMIN}
          - name: WP_PASSWORD
            value: ${WP_PASSWORD}
          - name: WP_EMAIL
            value: ${WP_EMAIL}
          - name: MYSQL_DATABASE
            value: wordpress
          - name: MYSQL_USER
            value: ${DATABASE_USERNAME}
          - name: MYSQL_PASSWORD
            value: ${DATABASE_PASSWORD}
          - name: MYSQL_HOST
            value: ${APPLICATION_NAME}-db
          - name: MYSQL_TABLE_PREFIX
            value: wp_
          - name: SMTP_HOST
            value: ${SMTP_HOST}
          - name: SMTP_USERNAME
            value: ${SMTP_USERNAME}
          - name: SMTP_PASSWORD
            value: ${SMTP_PASSWORD}
          - name: SMTP_ENCRYPTION
            value: ${SMTP_ENCRYPTION}
          - name: SMTP_AUTH
            value: ${SMTP_AUTH}
          - name: SMTP_PORT
            value: ${SMTP_PORT}
          image: ${APPLICATION_NAME}-img
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /wp-admin/install.php
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: wordpress
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /wp-admin/install.php
              port: 8080
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              memory: ${WORDPRESS_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /opt/app-root/src
            name: data
          - mountPath: /opt/app-root/backwpup
            name: backup
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-wordpress-data
        - name: backup
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-wordpress-backup
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-db
    annotations:
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"mysql:${MYSQL_VERSION}","namespace":"openshift"},"fieldPath":"spec.template.spec.containers[?(@.name==\"mysql\")].image","pause":"false"}]'
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}-db
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}-db
      spec:
        containers:
        - env:
          - name: MYSQL_DATABASE
            value: wordpress
          - name: MYSQL_USER
            value: ${DATABASE_USERNAME}
          - name: MYSQL_PASSWORD
            value: ${DATABASE_PASSWORD}
          image: mysql
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${DATABASE_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: data
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-mysql-data
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-db
  spec:
    ports:
    - name: 3306-tcp
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}-db
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    host: ${PUBLIC_URL}
    port:
      targetPort: 8080
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-mysql-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DATABASE_VOLUME_SIZE}
    storageClassName: ${VOLUME_CLASS}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-wordpress-data
  spec:
    accessModes:
    - ${WORDPRESS_VOLUME_TYPE}
    resources:
      requests:
        storage: ${WORDPRESS_VOLUME_SIZE}
    storageClassName: ${VOLUME_CLASS}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-wordpress-backup
  spec:
    accessModes:
    - ${WORDPRESS_VOLUME_TYPE}
    resources:
      requests:
        storage: ${BACKUP_VOLUME_SIZE}
    storageClassName: ${VOLUME_CLASS}
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      mathrice-okd.smtp.relay: super
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-smtprelay
  stringData:
    smtpHost: ${SMTP_HOST}
    userId: ${SMTP_USERNAME}
    userPassword: ${SMTP_PASSWORD}
  type: Opaque
parameters:
- description: The name of the WordPress instance.
  from: '[a-zA-Z0-9]'
  name: APPLICATION_NAME
  required: true
  value: my-wordpress-site
- description: The Login of the WordPress Administrator.
  from: '[a-zA-Z0-9]'
  name: WP_ADMIN
  required: true
- description: The password for the WordPress Administrator.
  from: '[a-zA-Z0-9]{12}'
  generate: expression
  name: WP_PASSWORD
- description: The Mail of the WordPress Administrator (yours).
  from: '[a-zA-Z0-9]'
  name: WP_EMAIL
  required: true
- description: Public site URL. Leave empty for tests. For production use please contact support@math.cnrs.fr and visit https://plmshift.pages.math.cnrs.fr/Foire_aux_Questions/certificat
  name: PUBLIC_URL
- description: Size of the persistent volume for Wordpress.
  name: WORDPRESS_VOLUME_SIZE
  required: true
  value: 1Gi
- description: Size of the persistent volume for Wordpress Backup Plugin.
  name: BACKUP_VOLUME_SIZE
  required: true
  value: 1Gi
- description: Type of the persistent volume for Wordpress.
  name: WORDPRESS_VOLUME_TYPE
  required: true
  value: ReadWriteOnce
- description: Storage class for persistent storage (leave for default)
  name: VOLUME_CLASS
  value: nfs-provisioner
- description: Type of the deployment strategy for Wordpress.
  name: WORDPRESS_DEPLOYMENT_STRATEGY
  required: true
  value: Recreate
- description: Amount of memory available to WordPress.
  name: WORDPRESS_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Size of the persistent volume for the database.
  name: DATABASE_VOLUME_SIZE
  required: true
  value: 1Gi
- description: Amount of memory available to the database.
  name: DATABASE_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The name of the database user.
  from: user[a-f0-9]{8}
  generate: expression
  name: DATABASE_USERNAME
- description: The password for the database user.
  from: '[a-zA-Z0-9]{12}'
  generate: expression
  name: DATABASE_PASSWORD
- description: The version of the MySQL database.
  name: MYSQL_VERSION
  required: true
  value: 8.0-el8
- description: The version of the PHP builder.
  name: PHP_VERSION
  required: true
  value: 8.1-ubi9
- description: SMTP Host (Keep unchanged for default behaviour) 
  name: SMTP_HOST
- description: Default SMTP Port (Keep unchanged for default behaviour)
  name: SMTP_PORT
  value: "25"
  required: true
- description: SMTP Auth flag (Keep unchanged for default behaviour)
  name: SMTP_AUTH
  value: "false"
  required: true
- description: SMTP Encryption (Keep unchanged for default behaviour)
  name: SMTP_ENCRYPTION
  value: none
  required: true
- description: SMTP username (Keep unchanged for default behaviour)
  name: SMTP_USERNAME
  from: '[a-zA-Z0-9]{12}'
  generate: expression
- description: SMTP Password (Keep unchanged for default behaviour)
  from: '[a-zA-Z0-9]{12}'
  generate: expression
  name: SMTP_PASSWORD
